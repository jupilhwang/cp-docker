services:
  broker:
    image: confluentinc/cp-server
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://ec2-13-124-193-7.ap-northeast-2.compute.amazonaws.com:9092'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

      # KAFKA_LOG_RETENTION_MINITUES: 30
      KAFKA_METRIC_REPORTERS: io.confluent.telemetry.reporter.TelemetryReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: true
      CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: false
      KAFKA_CONFLUENT_TELEMETRY_REMOTECONFIG.__CONFLUENT_ENABLED: false
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__CONFLUENT_ENABLED: false

      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_TYPE: http
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_ENABLED: true
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_CLIENT_BASE_URL: http://prometheus:9090/api/v1/otlp
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_API_KEY: dummy
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_API_SECRET: dummy
      # KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_METRICS_INCLUDE: io.confluent.kafka.server.server.broker.state|io.confluent.kafka.server.replica.manager.leader.count|io.confluent.kafka.server.request.queue.size|io.confluent.kafka.server.broker.topic.failed.produce.requests.rate.1.min|io.confluent.kafka.server.tier.archiver.total.lag|io.confluent.kafka.server.request.total.time.ms.p99|io.confluent.kafka.server.broker.topic.failed.fetch.requests.rate.1.min|io.confluent.kafka.server.log.total.size|io.confluent.kafka.server.broker.topic.total.fetch.requests.rate.1.min|io.confluent.kafka.server.partition.caught.up.replicas.count|io.confluent.kafka.server.partition.observer.replicas.count|io.confluent.kafka.server.tier.tasks.num.partitions.in.error|io.confluent.kafka.server.broker.topic.bytes.out.rate.1.min|io.confluent.kafka.server.request.total.time.ms.p95|io.confluent.kafka.server.controller.active.controller.count|io.confluent.kafka.server.session.expire.listener.zookeeper.disconnects.total|io.confluent.kafka.server.request.total.time.ms.p999|io.confluent.kafka.server.controller.active.broker.count|io.confluent.kafka.server.request.handler.pool.request.handler.avg.idle.percent.rate.1.min|io.confluent.kafka.server.session.expire.listener.zookeeper.disconnects.rate.1.min|io.confluent.kafka.server.controller.unclean.leader.elections.rate.1.min|io.confluent.kafka.server.replica.manager.partition.count|io.confluent.kafka.server.controller.unclean.leader.elections.total|io.confluent.kafka.server.partition.replicas.count|io.confluent.kafka.server.broker.topic.total.produce.requests.rate.1.min|io.confluent.kafka.server.controller.offline.partitions.count|io.confluent.kafka.server.socket.server.network.processor.avg.idle.percent|io.confluent.kafka.server.partition.under.replicated|io.confluent.kafka.server.log.log.start.offset|io.confluent.kafka.server.log.tier.size|io.confluent.kafka.server.log.size|io.confluent.kafka.server.tier.fetcher.bytes.fetched.total|io.confluent.kafka.server.request.total.time.ms.p50|io.confluent.kafka.server.tenant.consumer.lag.offsets|io.confluent.kafka.server.session.expire.listener.zookeeper.expires.rate.1.min|io.confluent.kafka.server.log.log.end.offset|io.confluent.kafka.server.log.num.log.segments|io.confluent.kafka.server.broker.topic.bytes.in.rate.1.min|io.confluent.kafka.server.partition.under.min.isr|io.confluent.kafka.server.partition.in.sync.replicas.count|io.confluent.telemetry.http.exporter.batches.dropped|io.confluent.telemetry.http.exporter.items.total|io.confluent.telemetry.http.exporter.items.succeeded|io.confluent.telemetry.http.exporter.send.time.total.millis
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_METRICS_INCLUDE: io.confluent.kafka.server.*|io.confluent.telemetry.*|io.confluent.system.*
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_CLIENT_COMPRESSION: gzip
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_BUFFER_PENDING_BATCHES_MAX: 80
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_BUFFER_BATCH_ITEMS_MAX: 4000
      KAFKA_CONFLUENT_TELEMETRY_EXPORTER.__C3PLUSPLUS_BUFFER_INFLIGHT_SUBMISSION_MAX: 10

      KAFKA_CONFLUENT_TELEMETRY_METRICS_COLLECTOR_INTERVAL_MS: 60000
      KAFKA_CONFLUENT_CONSUMER_LAG_EMITTER_ENALBED: true

      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  schema-registry:
    image: confluentinc/cp-schema-registry
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: confluentinc/cp-server-connect
    hostname: connect
    container_name: connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"

      CONNECT_GROUP_ID: "connect"
      CONNECT_CONFIG_STORAGE_TOPIC: demo-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: demo-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: demo-connect-status
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO

  control-center:
    image: confluentinc/cp-enterprise-control-center-next-gen
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

      CONFLUENT_CONTROLCENTER_STREAMS_CPREST_URL: http://broker:8090

      CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: connect:8083

      CONTROL_CENTER_PROMETHEUS_ENABLE: true
      CONTROL_CENTER_PROMETHEUS_URL: http://prometheus:9090
      CONTROL_CENTER_PROMETHEUS_RULES_FILE: /mnt/data/data0/trigger_rules.yml
      CONTROL_CENTER_ALERTMANAGER_URL: http://alertmanager:9093
      CONTROL_CENTER_ALERTMANAGER_CONFIG_FILE: /mnt/data/data0/alertmanager.yml

    volumes:
      - prometheus-data:/mnt/data/data0
  
  prometheus:
    image: confluentinc/cp-enterprise-prometheus #prom/prometheus
    hostname: prometheus
    container_name: prometheus
    restart: always
    #network_mode: "host"
    command:
      - '--config.file=/mnt/data/data0/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.wal-compression'
      - '--web.enable-lifecycle'
      - '--web.enable-otlp-receiver'
      - '--web.listen-address=0.0.0.0:9090'
      # - '--web.console.libraries=/etc/prometheus/console_libraries'
      # - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-remote-write-receiver'
    ports:
      - 9090:9090
    volumes:
       - prometheus-data:/mnt/data/data0
    #   - prometheus-data:/prometheus

  alertmanager:
    image: confluentinc/cp-enterprise-alertmanager #prom/alertmanager
    hostname: alertmanager
    container_name: alertmanager
    restart: always
    #network_mode: "host"
    command:
      - '--config.file=/mnt/data/data0/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - 9093:9093
    volumes:
       - prometheus-data:/mnt/data/data0
  

volumes:
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/prometheus
      o: bind
